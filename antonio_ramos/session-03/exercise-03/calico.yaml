# Calico Version v3.1.1
# https://docs.projectcalico.org/v3.1/releases#v3.1.1
# This manifest includes the following component versions:
#   calico/node:v3.1.1
#   calico/cni:v3.1.1
#   calico/kube-controllers:v3.1.1

# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://172.31.47.5:2379,https://172.31.47.172:2379"

  # Configure the Calico backend to use.
  calico_backend: "bird"

  # The CNI network configuration to install on each node.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "calico",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "log_level": "info",
          "mtu": 1500,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }

  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"

---

# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following files with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # This self-hosted install expects three files with the following names.  The values
  # should be base64 encoded strings of the entire contents of each file.
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lKQU9kSWMwRG04YkVpTUEwR0NTcUdTSWIzRFFFQkN3VUFNQ294RXpBUkJnTlYKQkFNTUNrdDFZbVZ5Ym1WMFpYTXhFekFSQmdOVkJBb01Da3QxWW1WeWJtVjBaWE13SGhjTk1UZ3dOVEl4TVRjeQpPRFUwV2hjTk5EVXhNREEyTVRjeU9EVTBXakFxTVJNd0VRWURWUVFEREFwTGRXSmxjbTVsZEdWek1STXdFUVlEClZRUUtEQXBMZFdKbGNtNWxkR1Z6TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKbDJ2clRmb1R3RkxKYWpKK21sRjNOTUdpaHphRnVzbGRZUVFPRTB2WUQxOWo3MXBSRjh3THpZOEdkNG9KRjFoSwpuV0lRazh3eUFVVS9wVnMwVEtQd2ZDYkxXNWxYbFdMVDdONEZkaW1kdDVMcXlsUy9tK1k5OE53OThSanFSa0ZhClpvTmVnREpmUk5UWDVzUmw3WWE3YXgwWks3K1dXaitSOXQ0SjUzYlJvNytnVUNRNk9wUHQvRFZreGg4ZE94bi8KYWtPM0E3bXVlelNhbC9mb0xoR2RxdjY5enk3VHd4eThRNTh2QUIzVk5ydmRpVnROZGNKUXVpTUtCK1Q3emx4MgowWXhxVUF1cWhPYjIrQTkyWnRCczJ5SExtYjhURUcwaXhYYUVwdlN2eTZSKzluMGxNekZkL1B1dzBneUw2WDVXClVWNG5kc3RpNS9NTnA4RjFoQUVSVVFJREFRQUJvMUF3VGpBZEJnTlZIUTRFRmdRVUxpNUdwYktSVlJTSnZFRTQKOWlKVldYdW56QVl3SHdZRFZSMGpCQmd3Rm9BVUxpNUdwYktSVlJTSnZFRTQ5aUpWV1h1bnpBWXdEQVlEVlIwVApCQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFSbU5oUUZSUDBwcnViSFovcTVmVHZKQkczRW9SClk4dnRjUW1pUEEwT3hUdDhaLzREYzdBYUlnUUthSDF5WDQvcGMvNFlqeVl1RVlQcnpyWEtLMCt5QUt1ek1VdDUKOURWNnBuTmZOVUtuNVAvSk1PM2tlcWxlbmJBbXA1YzRBdFF4OExCWXB1RzEvVkdXK3kyOWF6YXd3c0Z4SmRVeAppM2EybWFVc2IrbWhTeVZwdy9kQUZHaCtIVU1wQ1dBNjZlUXJNTEhKWEJkOC9tSTBsdmRCYlJ2WE95VWZFYlJ2CmI3L2ZLZHBIQmxFVU41OEZaUGJSaUlWK3RlU3dKL2dubFdzakZtS0x2TEx2aFVSdDRkQ0U3M0JpaGpxemtveUIKc01tdEhZRTN0ZHdVSEVmRFVlRDJpaUVJaUxtMTI5UTc4R3E1RFc5RUFFYUE4SVFDUzhVWVhqdkdPQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5ekNDQWJNQ0NRQ2hSQVFUSkN5aGV6QU5CZ2txaGtpRzl3MEJBUXNGQURBcU1STXdFUVlEVlFRRERBcEwKZFdKbGNtNWxkR1Z6TVJNd0VRWURWUVFLREFwTGRXSmxjbTVsZEdWek1CNFhEVEU0TURVeU1qQTNORFF6T0ZvWApEVEU1TVRBd05EQTNORFF6T0Zvd0pURVVNQklHQTFVRUF3d0xaWFJqWkMxamJHbGxiblF4RFRBTEJnTlZCQW9NCkJHVjBZMlF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3dDTHlKSExUQzN3bHgKT05zVTFQRGRyNVJxUlJpdzY0N2pjTlhsMVBEUzRDb0V3NjhRWEZIV2ZOUnAyUW93eUx0ejJ3TlN6ZU5vWW43NAo5MUJ6bFFOQ2NYeEF0Nk1JdStuK2FqZEhyNzVaL2xvbmZMNVRLMEhRUWM3cEJHc1FtcUFqZXdIWkhQNUVIQmMrCkNwYzBZZVZnSjlXQVIvVFVSaDZjTTlJN2hoRVlBbWlCa0N0dy9xZ0RGazZnRVU1bERsMWZSd2hQNzVCVkhENXEKVU9xYWtQQlVDWFpLcVE0N3F1cE1nRHBhYWdIWHBCMEsvOVVSbE4xbFoyUkpCWjBqdUZBK2RURDhWOVVuZGJxTQo5bHQwUkZVc2hVNmRqOUh6bDlGOFZxUnU5MXdXQzl1ZDU3VFoxNU1RYjJ3WGR0YWZraEcxd252Y1RvcDhoU00yCkpKYTlPb0UzQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmNKa3dPMzF4RmovVVJPdzVtZFg4UXgKblcxcVhXM3VCalMxVkpZeENCRWFMY0xvL1RYWXJ4OXdMeVh5OFFGTVl6SHVla1RvdkpXVmlLejNWZmlKZmZsVgo4S2cvS1k2WHJ2T0RYNW5mcStqcHJOZm1XQWJVVkd1Mk85VHJ2Q2Z0c0g1UmkzR3BPVXRRVEpNYXRjZitiY2FUCm9tZzFQVjlQWnF5OWJqUEdUZUMzSlhSaXFqYkhDSlRUbURsUndqRkZIbFJtMWFlVis0Rjl6NWhIQ1VDL1ZUdGEKYm9KNHo1NGVWOWZxNkFWbEFhYjEyUE5pRUU4bkcvQUZ1Z1Z3Qkc2bHlzRkExT2ZEWEtGQ0hFRzEzUTdTYjlLbgpaTkdKMkQvQkMyaHBQZy9ROXd2OVNvK1kvTmhjMGxrOHBXNHk3K1AwQ2lXcWNQdzlMZkVqdDRkOXFMWVhIV0E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBc0FpOGlSeTB3dDhKY1RqYkZOVHczYStVYWtVWXNPdU80M0RWNWRUdzB1QXFCTU92CkVGeFIxbnpVYWRrS01NaTdjOXNEVXMzamFHSisrUGRRYzVVRFFuRjhRTGVqQ0x2cC9tbzNSNisrV2Y1YUozeSsKVXl0QjBFSE82UVJyRUpxZ0kzc0IyUnorUkJ3WFBncVhOR0hsWUNmVmdFZjAxRVllbkRQU080WVJHQUpvZ1pBcgpjUDZvQXhaT29CRk9aUTVkWDBjSVQrK1FWUncrYWxEcW1wRHdWQWwyU3FrT082cnFUSUE2V21vQjE2UWRDdi9WCkVaVGRaV2RrU1FXZEk3aFFQblV3L0ZmVkozVzZqUFpiZEVSVkxJVk9uWS9SODVmUmZGYWtidmRjRmd2Ym5lZTAKMmRlVEVHOXNGM2JXbjVJUnRjSjczRTZLZklVak5pU1d2VHFCTndJREFRQUJBb0lCQUcyY2d3azlmckQ1QUlBbgp6d01odFBuVklxMHBhVDZBN3ZCZ2lsQWFUL3ArNnFzY3poMTUzdHVYend3NXdVYXZOMG5remlUNVh1allyQWVLCnQrWEFtODc3cTBzQkRkdWFaeEdzUWMrNWR1WENvNUNDOUdBRlIyM09ESEM3OTQ3WE9XL2VZRUE0OVhxam96VlcKa3VCak5OaXk5Ulp6dDllVjhlbUJ1eDZsVkcrRng3bFlFY1RpMlRXc2cyRVV2SHdIVUNibldteFZGTUc4ekhDZQpwRG54bm8zcTQ0d2JEZUZBRFd4VzFEd3pmQnFERHVSRFp6dytrM1IxS0NybkZBVzV4Z0JCUXRLckhDb29LbkdCClhTQzVyMWYvUklaeENONTQrOFplaHJzZkFKRjFDc1RrbmduMytlKzdzdnptelFNWkZOYzcxV1lVUmtEMENsODgKSGwzL2I4RUNnWUVBM2hPdm1iN3JDUG5WK0Z1VHVKV0NJMnVubTR6T2R2amU3ekZOUHFwbDMxbVZEMTVaZjJQKwpVWWIwMzNvelF1QUdwS2xGNnZZeWwrZDRteFBDZkdxY2p2K0QzaEhnalRPcmdwQklGRU5OZlZnYVFmN04yYzFkCmlEbE13K09XeUhFaGgrRzM2c3dnQ09HV1JXU0Z3T2JuMnE5OVJBN2pua0ZEb05JK1QvelJCZE1DZ1lFQXl1eU0KYi8xVHVKUGhSeE9DRVNub3l6T3AydksxZmpFZXFEZ1hkdnp0MWdNdGxIK2R2RldhdlNFT3NGTHcvRFQvaG4wRApYWHpDUjVTcHpSSndEUjdNc0N0NW5FTjFpQ2hib1NxNlZOUXRaU1RHYVBvcGdnT1dhZnpEYnhBaVVwbVdsd1hRClVSQTlIRzF5QUZwYUQvejY5d2o1Nk5qek01QkJ5aUxSUTIwUkJJMENnWUVBb2hHVDBZdzNVdkdoYWdMTEo2WlUKdHl6VndQdGRvZzIyQkxIaVFaMXhnektKU2hIOUZxOE81c2lxNUh6MTlCUXlSUEVVQ1lsckd0amVkNjVQL1NTQQo1UXNzWFdDR2xBWGxZUCtTMnRiVE1tcWRueFFwZm80VmVGajQ0T3l6R2MwV1AyaEhKSitic1YrUW4wdmhJUXBpCm9vSDMxVGRZZmlIN0RON2lndFZxWmVrQ2dZRUFvV1NhSGNnQitsL0RZT0JuSm5lS3EzTWZ1UUFvMFlFSHZRcy8Kdm1kVVVrNmN4ZXJwN1l5NFVZd2xQcC81QXQ2MERLY0pNaVd6NzNLUnlvVExrZVBaTUpTaldHRmU3VGdNQ0pjUApNOEM5aWlCQm5lUzVkcXFieXhnNTUrK1JITmtES0lKN09MNE5uTHAvWFVCL09SQWdHcktNOFdEN3JSc2krRDNRCjZpdW95VkVDZ1lFQTJoSEFLcllVSDdLTzJzMVFlcUlrMWxTenQzYnE3czBWdGhvQjlPZkxhTWtEbWc0S2QxcDQKSkZJU0swdGQ4TFpjdzJWalM4WlhMVzU2WnJQVTB3eXMxbkVhSzYxSStKditJRXY4Zm9OUnl6RGtyaGhWYnIybAp1TFliMFZFQ0ZiZnFhZTUyODEvWHhPU21qejA4T2NlamM1SnpZUzlMb2RGc0hKcGs3ek9ndVRzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---

# This manifest installs the calico/node container, as well
# as the Calico CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      tolerations:
        # Make sure calico/node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: quay.io/calico/node:v3.1.1
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "192.168.0.0/16"
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              value: "1440"
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 9099
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /readiness
              port: 9099
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
        # This container installs the Calico CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: quay.io/calico/cni:v3.1.1
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Used by calico/node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400

---

# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      containers:
        - name: calico-kube-controllers
          image: quay.io/calico/kube-controllers:v3.1.1
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,profile,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system
